Index: UBoat/src/FilePathComponent/FilePathController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package FilePathComponent;\r\n\r\n\r\nimport UBoatApp.UBoatController;\r\nimport enigmaEngine.Engine;\r\nimport enigmaEngine.EnigmaEngine;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\n\r\npublic class FilePathController {\r\n\r\n    public Label FirstLoadFileLabel;\r\n    private SimpleStringProperty selectedFileProperty;\r\n\r\n    public SimpleBooleanProperty isFileSelectedProperty() {\r\n        return isFileSelected;\r\n    }\r\n\r\n    private SimpleBooleanProperty isFileSelected;\r\n    public Label SelectedFilePath;\r\n    private UBoatApp.UBoatController UBoatController;\r\n\r\n    public void setMainAppController(UBoatController MainController) {\r\n        UBoatController = MainController;\r\n    }\r\n\r\n    public FilePathController() {\r\n        //   selectedFileProperty = new SimpleStringProperty();\r\n        // isFileSelected= new SimpleBooleanProperty();\r\n    }\r\n\r\n    @FXML\r\n    private void initialize() {\r\n        selectedFileProperty = new SimpleStringProperty();\r\n        isFileSelected = new SimpleBooleanProperty();\r\n        SelectedFilePath.textProperty().bind(selectedFileProperty);\r\n    }\r\n//    @FXML\r\n//    public void LoadFileButtonActionListener(javafx.event.ActionEvent actionEvent) {\r\n//        try {\r\n//            Stage stage = new Stage();\r\n//            FileChooser fileChooser = new FileChooser();\r\n//            fileChooser.setTitle(\"Select file\");\r\n//            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"xml files\", \"*.xml\"));\r\n//            File selectedFile = fileChooser.showOpenDialog(stage);\r\n//            if (selectedFile == null) {\r\n//                return;\r\n//            }\r\n//\r\n//            String absolutePath = selectedFile.getAbsolutePath();\r\n//            Engine mEngine = new EnigmaEngine();\r\n//            try {\r\n//                mEngine.loadXMLFile(absolutePath);\r\n//                mEngine.resetAllData();\r\n//                mainAppController.resetAllData();\r\n//                selectedFileProperty.set(absolutePath);\r\n//                mainAppController.setmEngine(mEngine);\r\n//                mainAppController.setMachineDetails();\r\n//\r\n//                mainAppController.setConfPanel();\r\n//                //mainAppController.setInitializeCodeConf();\r\n//                mainAppController.getFirstLoadFileLabel().setText(\"File loaded successfully.\");\r\n//                mainAppController.setEncrypteTab();\r\n//\r\n//                mainAppController.setDMTab();\r\n//\r\n//\r\n//                isFileSelected.set(true);\r\n//            } catch (Exception ex) {\r\n//                Alert errorAlert = new Alert(Alert.AlertType.ERROR);\r\n//                errorAlert.setTitle(\"Error\");\r\n//                errorAlert.setHeaderText(\"Invalid file details\");\r\n//                errorAlert.setContentText(\"In file \" + selectedFile.getPath() +\"\\n\\n\" + ex.getMessage());\r\n//                errorAlert.showAndWait();\r\n//                //mainAppController.getFirstLoadFileLabel().setVisible(true);\r\n//                //mainAppController.getFirstLoadFileLabel().setText(\"In file: \" + absolutePath +\"\\n\" + ex.getMessage());\r\n//            }\r\n//        }catch (Exception ex)\r\n//        {\r\n//            mainAppController.setConfPanel();\r\n//        }\r\n\r\n    //   }\r\n\r\n    @FXML\r\n    public void LoadFileButtonActionListener(javafx.event.ActionEvent actionEvent) {\r\n        try {\r\n            Stage stage = new Stage();\r\n            FileChooser fileChooser = new FileChooser();\r\n            fileChooser.setTitle(\"Select file\");\r\n            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"xml files\", \"*.xml\"));\r\n            File selectedFile = fileChooser.showOpenDialog(stage);\r\n            if (selectedFile == null) {\r\n                return;\r\n            }\r\n\r\n            String absolutePath = selectedFile.getAbsolutePath();\r\n            Engine mEngine = new EnigmaEngine();\r\n            try {\r\n\r\n                mEngine.loadXMLFileFromStringContent(new String(Files.readAllBytes(Paths.get(absolutePath))));\r\n                mEngine.resetAllData();\r\n                UBoatController.resetAllData();\r\n                selectedFileProperty.set(absolutePath);\r\n                UBoatController.setmEngine(mEngine);\r\n                UBoatController.setMachineDetails();\r\n\r\n                UBoatController.setConfPanel();\r\n                //mainAppController.setInitializeCodeConf();\r\n                UBoatController.getFirstLoadFileLabel().setText(\"File loaded successfully.\");\r\n                UBoatController.setEncrypteTab();\r\n                UBoatController.bindFileToTabPane(isFileSelected);\r\n\r\n               // UBoatController.setDMTab();\r\n                isFileSelected.set(true);\r\n            } catch (Exception ex) {\r\n                Alert errorAlert = new Alert(Alert.AlertType.ERROR);\r\n                errorAlert.setTitle(\"Error\");\r\n                errorAlert.setHeaderText(\"Invalid file details\");\r\n                errorAlert.setContentText(\"In file \" + selectedFile.getPath() + \"\\n\\n\" + ex.getMessage());\r\n                errorAlert.showAndWait();\r\n                //mainAppController.getFirstLoadFileLabel().setVisible(true);\r\n                //mainAppController.getFirstLoadFileLabel().setText(\"In file: \" + absolutePath +\"\\n\" + ex.getMessage());\r\n            }\r\n        } catch (Exception ex) {\r\n            UBoatController.setConfPanel();\r\n        }\r\n\r\n    }\r\n\r\n    public Label getFirstLoadFileLabel() {\r\n        return FirstLoadFileLabel;\r\n    }\r\n\r\n    public void resetFile() {\r\n        FirstLoadFileLabel.setText(\"You need first load the machine from file\");\r\n        selectedFileProperty.set(\"\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/FilePathComponent/FilePathController.java b/UBoat/src/FilePathComponent/FilePathController.java
--- a/UBoat/src/FilePathComponent/FilePathController.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/UBoat/src/FilePathComponent/FilePathController.java	(date 1665569240843)
@@ -1,18 +1,26 @@
 package FilePathComponent;
 
 
+import Client.http.Constants;
+import Client.http.HttpClientUtil;
 import UBoatApp.UBoatController;
 import enigmaEngine.Engine;
 import enigmaEngine.EnigmaEngine;
+import general.ApplicationType;
+import javafx.application.Platform;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
 import javafx.fxml.FXML;
 import javafx.scene.control.Alert;
 import javafx.scene.control.Label;
 import javafx.stage.FileChooser;
 import javafx.stage.Stage;
+import okhttp3.*;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.File;
+import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -30,6 +38,9 @@
     public Label SelectedFilePath;
     private UBoatApp.UBoatController UBoatController;
 
+    Alert errorAlert = new Alert(Alert.AlertType.ERROR);
+    private final StringProperty errorMessageProperty = new SimpleStringProperty();
+
     public void setMainAppController(UBoatController MainController) {
         UBoatController = MainController;
     }
@@ -43,6 +54,8 @@
     private void initialize() {
         selectedFileProperty = new SimpleStringProperty();
         isFileSelected = new SimpleBooleanProperty();
+        errorAlert.setTitle("Error");
+        errorAlert.contentTextProperty().bind(errorMessageProperty);
         SelectedFilePath.textProperty().bind(selectedFileProperty);
     }
 //    @FXML
@@ -106,32 +119,70 @@
 
             String absolutePath = selectedFile.getAbsolutePath();
             Engine mEngine = new EnigmaEngine();
-            try {
+
+            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
+                    .addFormDataPart("file",absolutePath,
+                            RequestBody.create(MediaType.parse("application/octet-stream"),
+                                    absolutePath)).build();
+            String finalUrl = HttpUrl
+                    .parse(Constants.UPLOAD_FILE)
+                    .newBuilder()
+                    .build()
+                    .toString();
+
+
+            HttpClientUtil.runAsync(finalUrl, new Callback() {
+
+                @Override
+                public void onFailure(@NotNull Call call, @NotNull IOException e) {
+                    Platform.runLater(() ->
+                            errorMessageProperty.set("Something went wrong: " + e.getMessage())
+                    );
+                }
+
+                @Override
+                public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
+                    if (response.code() != 200) {
+                        String responseBody = response.body().string();
+                        Platform.runLater(() ->
+                                errorMessageProperty.set("Something went wrong: " + responseBody)
+                        );
+                    } else {
+                        System.out.println("Login Success");
+                        Platform.runLater(() -> {
+                            try {
 
-                mEngine.loadXMLFileFromStringContent(new String(Files.readAllBytes(Paths.get(absolutePath))));
-                mEngine.resetAllData();
-                UBoatController.resetAllData();
-                selectedFileProperty.set(absolutePath);
-                UBoatController.setmEngine(mEngine);
-                UBoatController.setMachineDetails();
+                                mEngine.loadXMLFileFromStringContent(new String(Files.readAllBytes(Paths.get(absolutePath))));
+                                mEngine.resetAllData();
+                                UBoatController.resetAllData();
+                                selectedFileProperty.set(absolutePath);
+                                UBoatController.setmEngine(mEngine);
+                                UBoatController.setMachineDetails();
 
-                UBoatController.setConfPanel();
-                //mainAppController.setInitializeCodeConf();
-                UBoatController.getFirstLoadFileLabel().setText("File loaded successfully.");
-                UBoatController.setEncrypteTab();
-                UBoatController.bindFileToTabPane(isFileSelected);
+                                UBoatController.setConfPanel();
+                                //mainAppController.setInitializeCodeConf();
+                                UBoatController.getFirstLoadFileLabel().setText("File loaded successfully.");
+                                UBoatController.setEncrypteTab();
+                                UBoatController.bindFileToTabPane(isFileSelected);
 
-               // UBoatController.setDMTab();
-                isFileSelected.set(true);
-            } catch (Exception ex) {
-                Alert errorAlert = new Alert(Alert.AlertType.ERROR);
-                errorAlert.setTitle("Error");
-                errorAlert.setHeaderText("Invalid file details");
-                errorAlert.setContentText("In file " + selectedFile.getPath() + "\n\n" + ex.getMessage());
-                errorAlert.showAndWait();
-                //mainAppController.getFirstLoadFileLabel().setVisible(true);
-                //mainAppController.getFirstLoadFileLabel().setText("In file: " + absolutePath +"\n" + ex.getMessage());
-            }
+                                // UBoatController.setDMTab();
+                                isFileSelected.set(true);
+                            } catch (Exception ex) {
+                                Alert errorAlert = new Alert(Alert.AlertType.ERROR);
+                                errorAlert.setTitle("Error");
+                                errorAlert.setHeaderText("Invalid file details");
+                                errorAlert.setContentText("In file " + selectedFile.getPath() + "\n\n" + ex.getMessage());
+                                errorAlert.showAndWait();
+                                //mainAppController.getFirstLoadFileLabel().setVisible(true);
+                                //mainAppController.getFirstLoadFileLabel().setText("In file: " + absolutePath +"\n" + ex.getMessage());
+                            }
+
+                        });
+                    }
+                }
+            });
+
+
         } catch (Exception ex) {
             UBoatController.setConfPanel();
         }
Index: UBoat/src/Login/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Login;\r\n\r\nimport DMencrypt.DMoperational.DMoperationalController;\r\nimport MainUboatApp.CommonResources;\r\nimport MainUboatApp.MainUboatController;\r\nimport UBoatApp.UBoatController;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.beans.property.StringProperty;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.WindowEvent;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class LoginController {\r\n\r\n\r\n    @FXML\r\n    private GridPane loginPage;\r\n    @FXML\r\n    private TextField userNameTextField;\r\n\r\n    @FXML\r\n    private Button loginButton;\r\n\r\n    private List<String> UBoatNames;\r\n\r\n    private MainUboatController mainUboatController;\r\n\r\n    private final StringProperty errorMessageProperty = new SimpleStringProperty();\r\n    Alert errorAlert = new Alert(Alert.AlertType.ERROR);\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        UBoatNames=new ArrayList<>();\r\n        errorAlert.setTitle(\"Error\");\r\n        errorAlert.contentTextProperty().bind(errorMessageProperty);\r\n//        HttpClientUtil.setCookieManagerLoggingFacility(line ->\r\n//                Platform.runLater(() ->\r\n//                        updateHttpStatusLine(line)));\r\n    }\r\n\r\n\r\n    @FXML\r\n    void loginButtonClicked(ActionEvent event) {\r\n        String userName = userNameTextField.getText();\r\n        if (userName.isEmpty()) {\r\n            errorMessageProperty.set(\"User name is empty. You can't login with empty user name\");\r\n            return;\r\n        }\r\n        if(UBoatNames.contains(userName))\r\n        {\r\n            errorMessageProperty.set(\"User name already logged in. You can't login with same user name\");\r\n            return;\r\n        }\r\n        UBoatNames.add(userName);\r\n\r\n        mainUboatController.updateUserName(userName);\r\n        mainUboatController.switchToChatRoom();\r\n\r\n\r\n//        String finalUrl = HttpUrl\r\n//                .parse(Constants.LOGIN_PAGE)\r\n//                .newBuilder()\r\n//                .addQueryParameter(\"username\", userName)\r\n//                .build()\r\n//                .toString();\r\n//\r\n//        updateHttpStatusLine(\"New request is launched for: \" + finalUrl);\r\n//\r\n//        HttpClientUtil.runAsync(finalUrl, new Callback() {\r\n//\r\n//            @Override\r\n//            public void onFailure(@NotNull Call call, @NotNull IOException e) {\r\n//                Platform.runLater(() ->\r\n//                        errorMessageProperty.set(\"Something went wrong: \" + e.getMessage())\r\n//                );\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\r\n//                if (response.code() != 200) {\r\n//                    String responseBody = response.body().string();\r\n//                    Platform.runLater(() ->\r\n//                            errorMessageProperty.set(\"Something went wrong: \" + responseBody)\r\n//                    );\r\n//                } else {\r\n//                    Platform.runLater(() -> {\r\n//                        chatAppMainController.updateUserName(userName);\r\n//                        chatAppMainController.switchToChatRoom();\r\n//                    });\r\n//                }\r\n//            }\r\n//        });\r\n\r\n    }\r\n\r\n    private void switchToUBoatScene(){\r\n\r\n        URL UboatPageUrl = getClass().getClassLoader().getResource(CommonResources.UBOAT_APP_FXML_INCLUDE_RESOURCE);\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            fxmlLoader.setLocation(UboatPageUrl);\r\n\r\n            assert UboatPageUrl != null;\r\n            Parent root=fxmlLoader.load(UboatPageUrl.openStream());\r\n            Scene scene = new Scene(root,1010,1020);\r\n\r\n            UBoatController machineController=fxmlLoader.getController();\r\n            Stage stage=new Stage();\r\n            stage.setScene(scene);\r\n            stage.getScene().getWindow().addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, DMoperationalController::closeWindowEvent);\r\n            stage.show();\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @FXML\r\n    void quitButtonClicked(ActionEvent event) {\r\n        Platform.exit();\r\n    }\r\n\r\n    @FXML\r\n    void userNameKeyTyped(KeyEvent event) {\r\n        errorMessageProperty.set(\"\");\r\n    }\r\n\r\n    public void setMainController(MainUboatController mainUboatController) {\r\n        this.mainUboatController=mainUboatController;\r\n    }\r\n\r\n    public TextField getName() {\r\n        return userNameTextField;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/Login/LoginController.java b/UBoat/src/Login/LoginController.java
--- a/UBoat/src/Login/LoginController.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/UBoat/src/Login/LoginController.java	(date 1665561938049)
@@ -1,9 +1,12 @@
 package Login;
 
+import Client.http.Constants;
+import Client.http.HttpClientUtil;
 import DMencrypt.DMoperational.DMoperationalController;
 import MainUboatApp.CommonResources;
 import MainUboatApp.MainUboatController;
 import UBoatApp.UBoatController;
+import general.ApplicationType;
 import javafx.application.Platform;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
@@ -19,6 +22,11 @@
 import javafx.scene.layout.GridPane;
 import javafx.stage.Stage;
 import javafx.stage.WindowEvent;
+import okhttp3.Call;
+import okhttp3.Callback;
+import okhttp3.HttpUrl;
+import okhttp3.Response;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.IOException;
 import java.net.URL;
@@ -48,7 +56,7 @@
         UBoatNames=new ArrayList<>();
         errorAlert.setTitle("Error");
         errorAlert.contentTextProperty().bind(errorMessageProperty);
-//        HttpClientUtil.setCookieManagerLoggingFacility(line ->
+//       HttpClientUtil.setCookieManagerLoggingFacility(line ->
 //                Platform.runLater(() ->
 //                        updateHttpStatusLine(line)));
     }
@@ -68,43 +76,42 @@
         }
         UBoatNames.add(userName);
 
-        mainUboatController.updateUserName(userName);
-        mainUboatController.switchToChatRoom();
+
+
+        String finalUrl = HttpUrl
+                .parse(Constants.LOGIN_PAGE)
+                .newBuilder()
+                .addQueryParameter("username", userName)
+                .addQueryParameter("type", ApplicationType.UBOAT.toString())
+                .build()
+                .toString();
+
+        HttpClientUtil.runAsync(finalUrl, new Callback() {
+
+            @Override
+            public void onFailure(@NotNull Call call, @NotNull IOException e) {
+                Platform.runLater(() ->
+                        errorMessageProperty.set("Something went wrong: " + e.getMessage())
+                );
+            }
+
+            @Override
+            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
+                if (response.code() != 200) {
+                    String responseBody = response.body().string();
+                    Platform.runLater(() ->
+                            errorMessageProperty.set("Something went wrong: " + responseBody)
+                    );
+                } else {
+                    System.out.println("Login Success");
+                    Platform.runLater(() -> {
+                        mainUboatController.updateUserName(userName);
+                        mainUboatController.switchToMainPanel();
 
-
-//        String finalUrl = HttpUrl
-//                .parse(Constants.LOGIN_PAGE)
-//                .newBuilder()
-//                .addQueryParameter("username", userName)
-//                .build()
-//                .toString();
-//
-//        updateHttpStatusLine("New request is launched for: " + finalUrl);
-//
-//        HttpClientUtil.runAsync(finalUrl, new Callback() {
-//
-//            @Override
-//            public void onFailure(@NotNull Call call, @NotNull IOException e) {
-//                Platform.runLater(() ->
-//                        errorMessageProperty.set("Something went wrong: " + e.getMessage())
-//                );
-//            }
-//
-//            @Override
-//            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
-//                if (response.code() != 200) {
-//                    String responseBody = response.body().string();
-//                    Platform.runLater(() ->
-//                            errorMessageProperty.set("Something went wrong: " + responseBody)
-//                    );
-//                } else {
-//                    Platform.runLater(() -> {
-//                        chatAppMainController.updateUserName(userName);
-//                        chatAppMainController.switchToChatRoom();
-//                    });
-//                }
-//            }
-//        });
+                    });
+                }
+            }
+        });
 
     }
 
Index: UBoat/src/http/HttpClientUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/http/HttpClientUtil.java b/UBoat/src/Client/http/HttpClientUtil.java
rename from UBoat/src/http/HttpClientUtil.java
rename to UBoat/src/Client/http/HttpClientUtil.java
--- a/UBoat/src/http/HttpClientUtil.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/UBoat/src/Client/http/HttpClientUtil.java	(date 1665560511353)
@@ -1,4 +1,4 @@
-package http;
+package Client.http;
 
 import okhttp3.Call;
 import okhttp3.Callback;
Index: UBoat/src/MainUboatApp/MainUboatController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package MainUboatApp;\r\n\r\nimport Login.LoginController;\r\nimport UBoatApp.UBoatController;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.beans.property.ReadOnlyDoubleProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.beans.property.StringProperty;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.layout.GridPane;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\n\r\npublic class MainUboatController{\r\n    public Label UboatTitle;\r\n    @FXML\r\n    private Label helloUserLabel;\r\n    private GridPane loginComponent;\r\n\r\n    @FXML\r\n    private FlowPane mainPanel;\r\n\r\n    private Parent UBoatComponent;\r\n\r\n    private UBoatController uBoatController;\r\n\r\n\r\n\r\n    private LoginController logicController;\r\n\r\n    private final StringProperty currentUserName;\r\n    private ReadOnlyDoubleProperty widthProperty;\r\n    private ReadOnlyDoubleProperty heightProperty;\r\n\r\n\r\n    public MainUboatController() {\r\n        currentUserName = new SimpleStringProperty(\"\");\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        helloUserLabel.textProperty().bind(Bindings.concat(\"Hello \", currentUserName));\r\n\r\n        loadLoginPage();\r\n        loadUBoatPage();\r\n    }\r\n\r\n    private void loadLoginPage() {\r\n        URL loginPageUrl = getClass().getClassLoader().getResource(CommonResources.UBOAT_APP_FXML_LOGIN);\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            fxmlLoader.setLocation(loginPageUrl);\r\n            loginComponent = fxmlLoader.load();\r\n            logicController = fxmlLoader.getController();\r\n            logicController.setMainController(this);\r\n\r\n            setMainPanelTo(loginComponent);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void loadUBoatPage() {\r\n        URL loginPageUrl = getClass().getClassLoader().getResource(CommonResources.UBOAT_APP_FXML_INCLUDE_RESOURCE);\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader();\r\n            fxmlLoader.setLocation(loginPageUrl);\r\n            UBoatComponent = fxmlLoader.load();\r\n            uBoatController = fxmlLoader.getController();\r\n           // uBoatController.bindScene(widthProperty,heightProperty);\r\n            uBoatController.setMainController(this);\r\n\r\n\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateUserName(String userName) {\r\n        currentUserName.set(userName);\r\n    }\r\n\r\n    private void setMainPanelTo(Parent pane) {\r\n\r\n        mainPanel.getChildren().clear();\r\n        mainPanel.getChildren().add(pane);\r\n        AnchorPane.setBottomAnchor(pane, 1.0);\r\n        AnchorPane.setTopAnchor(pane, 1.0);\r\n        AnchorPane.setLeftAnchor(pane, 1.0);\r\n        AnchorPane.setRightAnchor(pane, 1.0);\r\n    }\r\n\r\n    public void switchToChatRoom() {\r\n        setMainPanelTo(UBoatComponent);\r\n    }\r\n\r\n    public void switchToLogin() {\r\n        uBoatController.filePathComponentController.isFileSelectedProperty().set(false);\r\n        uBoatController.MachineTabController.bindTabPane( uBoatController.filePathComponentController.isFileSelectedProperty());\r\n        uBoatController.MachineTabController.resetAllData();\r\n        uBoatController.filePathComponentController.resetFile();\r\n        uBoatController.ContestTabController.resetAllData();\r\n        Platform.runLater(() -> {\r\n            currentUserName.set(\"\");\r\n            logicController.getName().clear();\r\n            setMainPanelTo(loginComponent);\r\n            uBoatController.UboatTabPane.getSelectionModel().select(0);\r\n        });\r\n    }\r\n\r\n    public void bindWidthAndHeightScene(ReadOnlyDoubleProperty widthProperty, ReadOnlyDoubleProperty heightProperty) {\r\n        this.widthProperty=widthProperty;\r\n        this.heightProperty=heightProperty;\r\n//        mainUboatScrollPane.prefWidthProperty().bind(widthProperty);\r\n//        mainUboatScrollPane.prefHeightProperty().bind(Bindings.subtract(heightProperty,100));\r\n\r\n        mainPanel.prefWidthProperty().bind(widthProperty);\r\n         mainPanel.prefHeightProperty().bind(Bindings.subtract(heightProperty,100));\r\n\r\n        UboatTitle.setPadding(new Insets(0,0,0,widthProperty.getValue()/2));\r\n        uBoatController.bindScene(widthProperty,heightProperty);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/MainUboatApp/MainUboatController.java b/UBoat/src/MainUboatApp/MainUboatController.java
--- a/UBoat/src/MainUboatApp/MainUboatController.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/UBoat/src/MainUboatApp/MainUboatController.java	(date 1665560891713)
@@ -99,7 +99,7 @@
         AnchorPane.setRightAnchor(pane, 1.0);
     }
 
-    public void switchToChatRoom() {
+    public void switchToMainPanel() {
         setMainPanelTo(UBoatComponent);
     }
 
Index: UBoat/src/http/SimpleCookieManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/http/SimpleCookieManager.java b/UBoat/src/Client/http/SimpleCookieManager.java
rename from UBoat/src/http/SimpleCookieManager.java
rename to UBoat/src/Client/http/SimpleCookieManager.java
--- a/UBoat/src/http/SimpleCookieManager.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/UBoat/src/Client/http/SimpleCookieManager.java	(date 1665560511432)
@@ -1,4 +1,4 @@
-package http;
+package Client.http;
 
 import okhttp3.Cookie;
 import okhttp3.CookieJar;
Index: UBoat/src/Client/http/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UBoat/src/Client/http/Constants.java b/UBoat/src/Client/http/Constants.java
new file mode 100644
--- /dev/null	(date 1665569240745)
+++ b/UBoat/src/Client/http/Constants.java	(date 1665569240745)
@@ -0,0 +1,31 @@
+package Client.http;
+
+import com.google.gson.Gson;
+
+public class Constants {
+
+    // global constants
+    public final static String LINE_SEPARATOR = System.getProperty("line.separator");
+    public final static String JHON_DOE = "<Anonymous>";
+    public final static int REFRESH_RATE = 2000;
+    public final static String CHAT_LINE_FORMATTING = "%tH:%tM:%tS | %.10s: %s%n";
+
+    // fxml locations
+    public final static String LOGIN_PAGE_FXML_RESOURCE_LOCATION = "/Login/login.fxml";
+    // Server resources locations
+    public final static String BASE_DOMAIN = "localhost";
+    private final static String BASE_URL = "http://" + BASE_DOMAIN + ":8080";
+    private final static String CONTEXT_PATH = "/BattlefieldManager_war_exploded";
+    private final static String FULL_SERVER_PATH = BASE_URL + CONTEXT_PATH;
+
+    public final static String LOGIN_PAGE = FULL_SERVER_PATH + "/login";
+    public static final String UPLOAD_FILE = FULL_SERVER_PATH + "/uboat/upload-file";
+
+    public final static String USERS_LIST = FULL_SERVER_PATH + "/userslist";
+    public final static String LOGOUT = FULL_SERVER_PATH + "/chat/logout";
+    public final static String SEND_CHAT_LINE = FULL_SERVER_PATH + "/pages/chatroom/sendChat";
+    public final static String CHAT_LINES_LIST = FULL_SERVER_PATH + "/chat";
+
+    // GSON instance
+    public final static Gson GSON_INSTANCE = new Gson();
+}
Index: BattlefieldManager/src/shared/servlet/UsersListServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shared.servlet;\r\n\r\nimport com.google.gson.Gson;\r\nimport jakarta.servlet.annotation.WebServlet;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport users.UserManager;\r\nimport utils.ServletUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\n@WebServlet(name = \"UserListServlet\", urlPatterns = {\"/userlist\"})\r\npublic class UsersListServlet extends HttpServlet {\r\n\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        //returning JSON objects, not HTML\r\n        response.setContentType(\"application/json\");\r\n        try (PrintWriter out = response.getWriter()) {\r\n            Gson gson = ServletUtils.getGson();\r\n            UserManager userManager = ServletUtils.getSystemUserManager(getServletContext());\r\n            List<Set<String>> usersList = userManager.getUsers();\r\n            String json = gson.toJson(usersList);\r\n            out.println(json);\r\n            out.flush();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BattlefieldManager/src/shared/servlet/UsersListServlet.java b/BattlefieldManager/src/shared/servlet/UsersListServlet.java
--- a/BattlefieldManager/src/shared/servlet/UsersListServlet.java	(revision f45faf68d970c157c762fd639207ede2da23b92a)
+++ b/BattlefieldManager/src/shared/servlet/UsersListServlet.java	(date 1665561128483)
@@ -21,7 +21,7 @@
         response.setContentType("application/json");
         try (PrintWriter out = response.getWriter()) {
             Gson gson = ServletUtils.getGson();
-            UserManager userManager = ServletUtils.getSystemUserManager(getServletContext());
+            UserManager userManager = ServletUtils.getSystemUserManager();
             List<Set<String>> usersList = userManager.getUsers();
             String json = gson.toJson(usersList);
             out.println(json);
